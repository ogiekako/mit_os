Excerpts from bootasm.S

# Set up the stack pointer and call into C.
movl    $start, %esp
call    bootmain

7dae:	ff 15 18 00 01 00    	call   *0x10018

bootmain に入る前に、esp を 0x7c00 にセットしている。
そこから、bootmain に飛ぶときに、
eip を push し、bootmain の prologue として、ebp を push している。
bootmain では、kernel の elfheader を 0x10000 以降に読み込み、elfheader で表される領域に実際のカーネルを読み込んでいる。それを読み込んだあと、最初のエントリーポイントにジャンプしている。ここでも、eip を push することになるが、永遠に戻ってくることはない。

call 直前では、esp は、0x20 の倍数でなければならないっぽい。

```
(gdb) x/24x $esp
0x7bdc: 0x00007db4      0x00000000      0x00000000      0x00000000
0x7bec: 0x00000000      0x00000000      0x00000000      0x00000000
0x7bfc: 0x00007c4d      0x8ec031fa      0x8ec08ed8      0xa864e4d0
0x7c0c: 0xb0fa7502      0xe464e6d1      0x7502a864      0xe6dfb0fa
0x7c1c: 0x16010f60      0x200f7c78      0xc88366c0      0xc0220f01
0x7c2c: 0x087c31ea      0x10b86600      0x8ed88e00      0x66d08ec0
```
7db4 - return eip for entry()
7c4d - return eip for bootmain()
7c4d の1つ上は、bootmain が push した ebp だがそれは 0 なので、ないかのように見える。
それ以降 (0x7c00 -) は、instructions.
